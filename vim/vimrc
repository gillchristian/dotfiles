" vim: sw=2 sts=2 fdm=marker fdl=1

set nocompatible
syntax on
filetype plugin indent on

" VIM-PLUG {{{
  call plug#begin('~/.vim/bundle')

  " UI
  Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] } |
    \ Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'vim-airline/vim-airline'
  Plug 'airblade/vim-gitgutter'

  " Themes
  Plug 'morhetz/gruvbox'

  " Changing files
  " Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug '/usr/local/opt/fzf'

  " Lint & format
  Plug 'w0rp/ale'

  " Motion & edit
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'kana/vim-textobj-user' |
    \ Plug 'fvictorio/vim-textobj-backticks' |
    \ Plug 'glts/vim-textobj-comment' |
    \ Plug 'kana/vim-textobj-entire' |
    \ Plug 'kana/vim-textobj-fold' |
    \ Plug 'saaguero/vim-textobj-pastedtext'
  Plug 'joequery/Stupid-EasyMotion'
  Plug 'terryma/vim-multiple-cursors'
  Plug 'ervandew/supertab'
  Plug 'bkad/CamelCaseMotion'

  " IDE (autocomplete & others)
  " Plug 'Valloric/YouCompleteMe'
  " Plug 'ternjs/tern_for_vim'
  Plug 'editorconfig/editorconfig-vim'

  Plug 'majutsushi/tagbar'
  " Plug 'Shougo/vimproc.vim', {'do' : 'make'} " should I remove it?

  " ---------- languages ----------
  " Elm
  Plug 'elmcast/elm-vim'

  " Pug
  Plug 'digitaltoad/vim-pug'

  " JavaScript, TypeScript & Flow
  Plug 'pangloss/vim-javascript'
  Plug 'mxw/vim-jsx'
  Plug 'HerringtonDarkholme/yats.vim'
  Plug 'Quramy/tsuquyomi'
  Plug 'jxnblk/vim-mdx-js'

  " Haskell
  Plug 'neovimhaskell/haskell-vim'

  " Rust
  Plug 'rust-lang/rust.vim'
  Plug 'prabirshrestha/async.vim'
  Plug 'prabirshrestha/vim-lsp'
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'

  " ReasonML
  Plug 'reasonml-editor/vim-reason-plus'

  " Icons (must be the last one)
  Plug 'ryanoasis/vim-devicons'

  call plug#end()

" }}}

" OPTIONS {{{
  " UI {{{
    set colorcolumn=+0 " Color column = textwidth
    set cursorline
    set foldcolumn=2
    set hlsearch
    set laststatus=2
    set number relativenumber
    " Show matching brackets when inserting
    set showmatch
    set showcmd
    set showtabline=2
    set textwidth=80
    set nowrap
    set mouse+=a
    if &term =~ '^tmux'
        " tmux knows the extended mouse mode
        set ttymouse=xterm2
    endif
    set term=screen-256color
    set encoding=UTF-8
  " }}}
  " Indentation {{{
    set autoindent
    set expandtab
    set shiftround
    set shiftwidth=2
    set tabstop=2
    set softtabstop=2
  " }}}
  " Etc {{{
    set backspace=2
    set backupcopy=yes
    set confirm
    set clipboard=unnamed
    " set clipboard=unnamedplus " for Linux
    " set diffopt+=vertical     " for linux
    set formatoptions=cqj
    set nohidden
    " Keep at least 5 lines above or below the cursor
    set scrolloff=5
    " set ignorecase
    set modeline
    set splitright
    set completeopt-=preview
    " Wildmenu
    set wildmenu
    set wildmode=list:full
  " }}}
  " Colors {{{
    set background=dark
    set t_Co=256
    let g:gruvbox_italic=1
    colorscheme gruvbox

    if has("termguicolors")
      set termguicolors
    endif

    if has("nvim")
      let $NVIM_TUI_ENABLE_TRUE_COLOR=1
      set t_8f=u;%lu;%lum
      set t_8b=u;%lu;%lum
    else
      let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
      let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    endif

    set fillchars+=vert:│
  " }}}
" }}}

" MAPS {{{
  " General {{{
    " fzf
    nnoremap <c-p> :FZF<cr>

    " Search selected text
    vnoremap / "py/\V<c-r>p<cr>

    " Easier %
    nnoremap M %
    vnoremap M %

    " Insert mode
    inoremap <c-o> <esc>O

    " Save
    nnoremap <f5> :w<cr>
    inoremap <f5> <esc>:w<cr>

    " Easier command history navigation
    cnoremap <c-p> <up>
    cnoremap <c-n> <down>

    " Hide searched items
    nnoremap <silent> <c-h> :nohl<cr>

    " Paste over visual
    vnoremap p "_dP

    " majutsushi/tagbar
    nmap <F8> :TagbarToggle<CR>
  " }}}
  " Leader maps {{{
    let mapleader = ' '
    let maplocalleader = ','

    " C: Copy {{{
      " cf: copy filename to clipboard
      nnoremap <silent> <leader>cf :let @+=expand('%:tfoo')<cr>
      " cp: copy path to clipboard
      nnoremap <silent> <leader>cp :let @+= expand("%:p")<cr> 
      " cl: copy filename:linenumber to clipboard
      nnoremap <silent> <leader>cl :let @+=join([expand('%:tfoo'), line(".")], ":")<cr>
    " }}}
    " N: NERDTree {{{
      nnoremap <leader>nf :NERDTreeFind<cr>
    " }}}
    " Y: YouCompleteMe {{{
      nnoremap gd :YcmCompleter GoToDefinition<cr>
    " }}}
    " }}}
    " Q: Quickfix {{{
      nnoremap <leader>qc :cclose<cr>
    " }}}
    " V: Vim {{{
      nnoremap <leader>vv :tabe $MYVIMRC<cr>
      nnoremap <leader>vr :source $MYVIMRC<cr>
      nnoremap <leader>vs :tabe $VIMHOME/UltiSnips<cr>
    " }}}
    " W: Windows {{{
      nnoremap <silent> <leader>wo :only<cr>
      nnoremap <silent> <leader>wh <c-w>h
      nnoremap <silent> <leader>wj <c-w>j
      nnoremap <silent> <leader>wk <c-w>k
      nnoremap <silent> <leader>wl <c-w>l
      nnoremap <silent> <leader>ww <c-w>w
    " }}}
  " }}}
" }}}

" PLUGINS {{{
  autocmd FileType javascript hi link jsObjectKey GruvboxFg3 
  autocmd FileType javascript hi link jsFuncCall Constant
  " YCM {{{
    let g:ycm_server_python_interpreter = '/usr/bin/python'

    let g:ycm_semantic_triggers =  {
        \   'c' : ['->', '.'],
        \   'ocaml,reason' : ['.', '#'],
        \   'cpp,objcpp' : ['->', '.', '::'],
        \   'd,python,perl6,scala,vb,elixir,go,haskell' : ['.'],
        \   'elm,cs,java,javascript,typescript' : ['.'],
        \   'html': ['<', '"', '</', ' '],
        \   'vim' : ['re![_a-za-z]+[_\w]*\.'],
        \   'lua' : ['.', ':'],
        \   'erlang' : [':']
        \ }
  " }}}

  " airline {{{
    " devicons
    let g:airline_powerline_fonts = 1
  " }}}

  " Not using UltiSnips now ---
  " Make YCM and UltiSnips work together {{{
    " make YCM compatible with UltiSnips (using supertab)
    " let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
    " let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
    " let g:SuperTabDefaultCompletionType = '<C-n>'
  " }}}

    " IDE

    " ale error & warning icons
    let g:ale_sign_error = '⤫'
    let g:ale_sign_warning = '⚠'
    " enable integration with airline
    let g:airline#extensions#ale#enabled = 1

    autocmd FileType typescript,go,elm,haskell,rust nnoremap <buffer> <leader>? :call ale#cursor#ShowCursorDetail()<cr>
    autocmd FileType typescript,go,elm,haskell,rust nnoremap <buffer> <leader>t <Plug>(YcmCompleter GetType)

    " TODO: 'haskell': ['ghc', 'hlint', 'hdevtools', 'ghc-mod'],
    let g:ale_linters ={
        \   'haskell': ['stack-ghc', 'hlint'],
        \   'go': ['gometalinter'],
        \   'typescript': ['tslint', 'eslint'],
        \}

    let b:ale_fixers = {
        \   'elm': ['elm-format'],
        \   'javascript': ['prettier'],
        \   'typescript': ['prettier'],
        \   'go': ['gofmt', 'goimports'],
        \   'haskell': ['ormolu'],
        \}
    let g:ale_fix_on_save = 1

    " Rust
    if executable('rls')
      au User lsp_setup call lsp#register_server({
          \ 'name': 'rls',
          \ 'cmd': {server_info->['rustup', 'run', 'nightly', 'rls']},
          \ 'whitelist': ['rust'],
          \ })
    endif 

    " Typescript
    let g:tsuquyomi_disable_quickfix = 1
    let g:typescript_indent_disable = 1 " @link https://github.com/leafgarland/typescript-vim#indenting

    autocmd FileType typescript nnoremap <buffer> <leader>r :TsuquyomiRenameSymbol<cr>
    autocmd FileType typescript nnoremap <buffer> <leader>R :TsuquyomiRenameSymbolC<cr>

    " Go

    " goimports on save
    let g:go_fmt_command = "goimports"

    " add tags (i.e. json) :GoAddTags
    let g:go_addtags_transform = "camelcase"

    " elm
    let g:elm_format_autosave = 1
  " }}}

  " }}}

  " NERDTree {{{
    let NERDTreeQuitOnOpen=1
    let NERDTreeShowHidden=1
    let g:NERDTreeWinSize = 50
    nnoremap <f2> :NERDTreeToggle<cr>
    inoremap <f2> <esc>:NERDTreeToggle<cr>

    " NERDTress File highlighting
    function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
    endfunction

    call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')

    call NERDTreeHighlightFile('md', 'Red', 'none', '#ffa500', '#151515')

    call NERDTreeHighlightFile('js', 'yellow', 'none', 'yellow', '#151515')
    call NERDTreeHighlightFile('jsx', 'blue', 'none', '#3366FF', '#151515')
    call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')

    call NERDTreeHighlightFile('html', 'Red', 'none', '#ffa500', '#151515')
    call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')

    call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
    call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')

    call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

  " }}}

  " CamelCaseMotion {{{
  call camelcasemotion#CreateMotionMappings('<leader>')
  " }}}

  " Tern {{{
    let tern_map_keys = 1
  " }}}

  " vim-javascript {{{
    let g:jsx_ext_required = 0
  " vim-javascript }}}

  " Haskell
  " nnoremap <Leader>ht :GhcModType<cr>
  " nnoremap <Leader>htc :GhcModTypeClear<cr>
  " Search for next top level def
  nnoremap <buffer> ]] /^\(\w\+\)\s\+::\\|\(^\s\+\)::<cr>
  nnoremap <buffer> [[ ?^\(\w\+\)\s\+::\\|\(^\s\+\)::<cr>
  " TODO: install ghcide !!!
  " au User lsp_setup call lsp#register_server({
  "   \ 'name': 'ghcide',
  "   \ 'cmd': {server_info->['/home/gillchristian/.local/bin/ghcide', '--lsp']},
  "   \ 'whitelist': ['haskell'],
  "   \ })
  " nnoremap <leader>t :LspHover<cr>

  let g:haskellmode_completion_ghc = 1
  " autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
  let g:ale_haskell_hlint_executable = 'stack'
  let g:ale_haskell_hfmt_executable = 'stack'

  let g:haskell_classic_highlighting = 1    " More normal highlighting
  let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
  let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`

  " others
    let g:netrw_browsex_viewer= "xdg-open"
    let g:move_key_modifier = 'C'
" }}}
