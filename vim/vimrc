" vim: sw=2 sts=2 fdm=marker fdl=1

set nocompatible
syntax on
filetype plugin indent on

" VIM-PLUG {{{
  call plug#begin('~/.vim/bundle')

  " UI
  Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] } | Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'vim-airline/vim-airline'
  Plug 'airblade/vim-gitgutter'
  Plug 'chrisbra/Colorizer', { 'on': 'ColorHighlight' }

  " Themes
  Plug 'morhetz/gruvbox'

  " Changing files
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

  " Lint & format
  Plug 'w0rp/ale'
  Plug 'prettier/vim-prettier', {'do': 'npm install', 
                                \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'gql', 'md']}

  " Motion & edit
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'kana/vim-textobj-user' | Plug 'fvictorio/vim-textobj-backticks' |
                               \ Plug 'glts/vim-textobj-comment' |
                               \ Plug 'kana/vim-textobj-entire' |
                               \ Plug 'kana/vim-textobj-fold' |
                               \ Plug 'saaguero/vim-textobj-pastedtext'
  Plug 'joequery/Stupid-EasyMotion'
  Plug 'terryma/vim-multiple-cursors'
  Plug 'ervandew/supertab'
  Plug 'bkad/CamelCaseMotion'

  " start screen
  Plug 'mhinz/vim-startify'

  " IDE (autocomplete & others)
  Plug 'Valloric/YouCompleteMe'
  Plug 'ternjs/tern_for_vim'
  Plug 'SirVer/ultisnips'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'dbeniamine/cheat.sh-vim'

  " ????
  Plug 'majutsushi/tagbar'
  Plug 'AndrewRadev/linediff.vim', {'on': 'Linediff'}
  Plug 'Shougo/vimproc.vim', {'do' : 'make'}
  Plug 'vim-scripts/loremipsum', {'on': 'Loremipsum'}
  Plug 'tpope/vim-fugitive'
  Plug 'mileszs/ack.vim'

  " ---------- languages ----------

  " Jenkinsfile
  Plug 'thanethomson/vim-jenkinsfile'
  " Markdown
  Plug 'shime/vim-livedown'

  " Golang
  Plug 'fatih/vim-go'
  Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/bundle/gocode/vim/symlink.sh' }

  " Elm
  Plug 'elmcast/elm-vim'

  " Pug
  Plug 'digitaltoad/vim-pug'

  " JavaScript, TypeScript & Flow
  Plug 'pangloss/vim-javascript'
  Plug 'mxw/vim-jsx'
  Plug 'HerringtonDarkholme/yats.vim'
  Plug 'Quramy/tsuquyomi'
  Plug 'flowtype/vim-flow', {'autoload': {'filetypes': 'javascript'}}
  Plug 'fleischie/vim-styled-components'
  Plug 'Quramy/vim-js-pretty-template'
  Plug 'leafgarland/typescript-vim'
  Plug 'jxnblk/vim-mdx-js'

  " Haskell
  Plug 'neovimhaskell/haskell-vim'
  Plug 'begriffs/haskell-vim-now'
  Plug 'eagletmt/ghcmod-vim'
  Plug 'eagletmt/neco-ghc'

  " Rust
  Plug 'rust-lang/rust.vim'

  " ReasonML
  Plug 'reasonml-editor/vim-reason-plus'

  " GN files
  Plug 'ngg/vim-gn'

  " -------------------------------

  " Icons (must be the last one)
  Plug 'ryanoasis/vim-devicons'

  call plug#end()

" }}}

" OPTIONS {{{
  " UI {{{
    set colorcolumn=+0 " Color column = textwidth
    set cursorline
    set foldcolumn=2
    set hlsearch
    set laststatus=2
    set relativenumber 
    set number   
    set showcmd
    set showtabline=2
    set textwidth=120
    set wildmenu
    set nowrap
    set mouse+=a
    if &term =~ '^tmux'
        " tmux knows the extended mouse mode
        set ttymouse=xterm2
    endif
    set encoding=UTF-8
  " }}}
  " Indentation {{{
    set autoindent
    set expandtab
    set shiftround
    set shiftwidth=2
    set tabstop=2
    set softtabstop=2
  " }}}
  " Etc {{{
    set backspace=2
    set backupcopy=yes
    set confirm
    set clipboard=unnamedplus
    set diffopt+=vertical
    set formatoptions=cqj
    set nohidden
    set ignorecase
    set modeline
    set splitright
    set completeopt-=preview
  " }}}
" }}}

" MAPS {{{
  " General {{{
    " fzf
    nnoremap <c-p> :FZF<cr>

    " Search selected text
    vnoremap / "py/\V<c-r>p<cr>

    " Easier %
    nnoremap M %
    vnoremap M %

    " Insert mode
    inoremap jk <esc>
    inoremap <c-o> <esc>O

    " Save
    nnoremap <f5> :w<cr>
    inoremap <f5> <esc>:w<cr>

    " Easier command history navigation
    cnoremap <c-p> <up>
    cnoremap <c-n> <down>

    nnoremap <silent> cof :call ToggleFoldMethod()<cr>

    " Hide searched items
    nnoremap <silent> <c-h> :nohl<cr>

    " Paste over visual
    vnoremap p "_dP

    " majutsushi/tagbar
    nmap <F8> :TagbarToggle<CR>
  " }}}
  " Leader maps {{{
    let mapleader = ' '
    let maplocalleader = ','

    " C: Copy {{{
      " cf: copy filename / path to clipboard
      nnoremap <silent> <leader>cf :let @+=expand('%:tfoo')<cr>
      nnoremap <silent> <leader>cp :let @+= expand("%:p")<cr> 
      " cl: copy filename:linenumber to clipboard
      nnoremap <silent> <leader>cl :let @+=join([expand('%:tfoo'), line(".")], ":")<cr>
    " }}}
    " N: NERDTree {{{
      nnoremap <leader>nf :NERDTreeFind<cr>
    " }}}
    " Y: YouCompleteMe {{{
      nnoremap gd :YcmCompleter GoToDefinition<cr>
    " }}}
    " }}}
    " Q: Quickfix {{{
      vnoremap <leader>q "zy :tabe<cr>:Ack '<c-r>z'<cr>
      nnoremap <leader>qc :cclose<cr>
    " }}}
    " T: Tabs {{{
      nnoremap <silent> <leader>to :tabonly<cr>
      nnoremap <silent> <leader>tp :tabm -1<cr>
      nnoremap <silent> <leader>tn :tabm +1<cr>
      nnoremap <silent> <leader>tr :call TabCloseRight()<cr>
    " }}}
    " V: Vim {{{
      nnoremap <leader>vv :tabe $MYVIMRC<cr>
      nnoremap <leader>vr :source $MYVIMRC<cr>
      nnoremap <leader>vs :tabe $VIMHOME/UltiSnips<cr>
    " }}}
    " W: Windows {{{
      nnoremap <silent> <leader>wo :only<cr>
      nnoremap <silent> <leader>wh <c-w>h
      nnoremap <silent> <leader>wj <c-w>j
      nnoremap <silent> <leader>wk <c-w>k
      nnoremap <silent> <leader>wl <c-w>l
      nnoremap <silent> <leader>ww <c-w>w
    " }}}
  " }}}
" }}}

" PLUGINS {{{
  let g:ackprg = 'ag --vimgrep'
  autocmd FileType javascript hi link jsObjectKey GruvboxFg3 
  autocmd FileType javascript hi link jsFuncCall Constant
  " Colorizer
    let g:colorizer_auto_filetype='scss,css,html,ts,js,tsx,re' " doesn't work for some reason
    nnoremap <silent> <Leader>h :ColorHighlight<cr>

  " vim-easy-align {{{
    xmap ga <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)
  " vim-easy-align }}}
  " YCM {{{
    let g:ycm_server_python_interpreter = '/usr/bin/python'

    let g:ycm_semantic_triggers =  {
        \   'c' : ['->', '.'],
        \   'objc' : ['->', '.'],
        \   'ocaml' : ['.', '#'],
        \   'cpp,objcpp' : ['->', '.', '::'],
        \   'perl' : ['->'],
        \   'php' : ['->', '::', '"', "'", 'use ', 'namespace ', '\'],
        \   'elm,cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
        \   'html': ['<', '"', '</', ' '],
        \   'vim' : ['re![_a-za-z]+[_\w]*\.'],
        \   'ruby' : ['.', '::'],
        \   'lua' : ['.', ':'],
        \   'erlang' : [':'],
        \   'haskell' : ['.']
        \ }
  " }}}

  " airline {{{
    " this is for devicons
    let g:airline_powerline_fonts = 1
  " }}}

  " Make YCM and UltiSnips work together {{{
    " make YCM compatible with UltiSnips (using supertab)
    let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
    let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
    let g:SuperTabDefaultCompletionType = '<C-n>'

    " better key bindings for UltiSnipsExpandTrigger
    let g:UltiSnipsExpandTrigger = "<tab>"
    let g:UltiSnipsJumpForwardTrigger = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
  " }}}

  " asdf (this used to be Syntastic but I removed it and there's still some config here lol) {{{
  "
    set statusline+=%#warningmsg#
    set statusline+=%*

    " IDE

    " ale error & warning icons
    let g:ale_sign_error = '⤫'
    let g:ale_sign_warning = '⚠'
    " enable integration with airline
    let g:airline#extensions#ale#enabled = 1

    autocmd FileType typescript,go,elm,haskell,rust nnoremap <buffer> <leader>? :call ale#cursor#ShowCursorDetail()<cr>
    autocmd FileType typescript,go,elm,haskell,rust nnoremap <buffer> <leader>t YcmCompleter GetType

    " TODO: 'haskell': ['ghc', 'hlint', 'hdevtools', 'ghc-mod'],
    let g:ale_linters ={
        \   'haskell': ['stack-ghc', 'hdevtools', 'stack-ghc-mod', 'hlint'],
        \   'go': ['gometalinter'],
        \   'typescript': ['tslint'],
        \}

    let b:ale_fixers = {
        \   'elm': ['elm-format'],
        \   'javascript': ['prettier'],
        \   'typescript': ['prettier'],
        \   'haskell': ['hfmt'],
        \   'go': ['gofmt', 'goimports'],
        \}
    let g:ale_fix_on_save = 1

    " Javascript

    " Typescript
    let g:tsuquyomi_disable_quickfix = 1
    let g:typescript_indent_disable = 1 " @link https://github.com/leafgarland/typescript-vim#indenting

    autocmd FileType typescript nnoremap <buffer> <leader>r <Plug>(TsuquyomiRenameSymbol)
    autocmd FileType typescript nnoremap <buffer> <leader>R <Plug>(TsuquyomiRenameSymbolC)

    " Go

    " syntax highlight
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_types = 1
    let g:go_auto_sameids = 1
    " goimports on save
    let g:go_fmt_command = "goimports"
    " show types under cursor
    let g:go_auto_type_info = 1

    " add tags (i.e. json) :GoAddTags
    let g:go_addtags_transform = "camelcase"

    autocmd FileType go nmap <buffer> <leader>r <Plug>(GoRename)
    autocmd FileType go nmap <buffer> <leader>p <Plug>(GoFmt)

    " elm
    let g:elm_format_autosave = 1
  " }}}

  " }}}

  " NERDTree {{{
    let NERDTreeQuitOnOpen=1
    let NERDTreeShowHidden=1
    let g:NERDTreeWinSize = 50
    nnoremap <f2> :NERDTreeToggle<cr>
    inoremap <f2> <esc>:NERDTreeToggle<cr>

    " NERDTress File highlighting
    function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
    endfunction

    call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')

    call NERDTreeHighlightFile('md', 'Red', 'none', '#ffa500', '#151515')

    call NERDTreeHighlightFile('js', 'yellow', 'none', 'yellow', '#151515')
    call NERDTreeHighlightFile('jsx', 'blue', 'none', '#3366FF', '#151515')
    call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')

    call NERDTreeHighlightFile('html', 'Red', 'none', '#ffa500', '#151515')
    call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')

    call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
    call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')

    call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

  " }}}

  " CamelCaseMotion {{{
  call camelcasemotion#CreateMotionMappings('<leader>')
  " }}}

  " Tern {{{
    let tern_map_keys = 1
  " }}}

  " vim-javascript {{{
    let g:jsx_ext_required = 0
  " vim-javascript }}}

  " vim-prettier {{{
    let g:prettier#exec_cmd_async = 1
  " vim-prettier }}}

  " vim-livedown {{{
  " should markdown preview get shown automatically upon opening markdown buffer
  let g:livedown_autorun = 0

  " should the browser window pop-up upon previewing
  let g:livedown_open = 1 

  " the port on which Livedown server will run
  let g:livedown_port = 1337

  " the browser to use
  let g:livedown_browser = "chrome"
  " vim-livedown }}}

  " Haskell
  nnoremap <Leader>ht :GhcModType<cr>
  nnoremap <Leader>htc :GhcModTypeClear<cr>

  let g:haskellmode_completion_ghc = 0
  autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

  " others
    let g:netrw_browsex_viewer= "xdg-open"
" }}}

" COLORS {{{
  set background=dark
  set t_Co=256
  let g:gruvbox_italic=1
  colorscheme gruvbox
" }}}

" FUNCTIONS {{{
  function! TabCloseRight()
    let cur=tabpagenr()
    while cur < tabpagenr('$')
      exe 'tabclose' . (cur + 1)
    endwhile
  endfunction

  " Toggle between folding using manual and syntax methods
  function! ToggleFoldMethod()
    let l:isManual = &foldmethod ==# 'manual'
    
    if l:isManual
      setlocal foldmethod=syntax
    else
      let l:position = getpos('.')

      setlocal foldmethod=manual
      " Remove all folds
      normal ggVGzD

      call setpos('.', l:position)
    endif

  endfunction
" FUNCTIONS }}}
