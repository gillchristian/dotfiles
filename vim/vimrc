" vim: sw=2 sts=2 fdm=marker fdl=1

set nocompatible
syntax on
filetype plugin indent on

" VIM-PLUG {{{
  call plug#begin('~/.vim/bundle')

  " UI
  Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] } |
    \ Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'vim-airline/vim-airline'
  Plug 'airblade/vim-gitgutter'

  " Themes
  Plug 'morhetz/gruvbox'

  " Changing files
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  " In Mac with Brew installation
  " @link: https://github.com/junegunn/fzf#as-vim-plugin
  " Plug '/usr/local/opt/fzf'
  Plug 'junegunn/fzf.vim'
  Plug 'BurntSushi/ripgrep'

  " Lint & format
  Plug 'dense-analysis/ale'

  " Motion & edit
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'kana/vim-textobj-user' |
    \ Plug 'fvictorio/vim-textobj-backticks' |
    \ Plug 'glts/vim-textobj-comment' |
    \ Plug 'kana/vim-textobj-entire' |
    \ Plug 'kana/vim-textobj-fold' |
    \ Plug 'saaguero/vim-textobj-pastedtext'
  Plug 'joequery/Stupid-EasyMotion'
  Plug 'terryma/vim-multiple-cursors'
  Plug 'bkad/CamelCaseMotion'
  Plug 'justinmk/vim-gtfo'

  " IDE (autocomplete & others)
  Plug 'editorconfig/editorconfig-vim'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}

  " ---------- languages ----------
  " Neuron
  Plug 'ihsanturk/neuron.vim'
  " Elm
  Plug 'elmcast/elm-vim'

  " Pug
  Plug 'digitaltoad/vim-pug'

  " JavaScript, TypeScript & Flow
  Plug 'pangloss/vim-javascript'
  Plug 'mxw/vim-jsx'
  Plug 'HerringtonDarkholme/yats.vim'
  Plug 'jxnblk/vim-mdx-js'

  " Haskell
  Plug 'neovimhaskell/haskell-vim'
  Plug 'sdiehl/vim-ormolu'

  " PureScript
  Plug 'purescript-contrib/purescript-vim'
  Plug 'frigoeu/psc-ide-vim'

  " ReasonML
  Plug 'reasonml-editor/vim-reason-plus'

  " JSON
  Plug 'kevinoid/vim-jsonc'

  " Dhall
  Plug 'vmchale/dhall-vim'

  " Toml
  Plug 'cespare/vim-toml'

  " Nix
  Plug 'LnL7/vim-nix'

  " Avro
  Plug 'gurpreetatwal/vim-avro'

  " Org-mode
  " TODO: find a maintained plugin (or switch to Neovim)
  Plug 'jceb/vim-orgmode'
  Plug 'axvr/org.vim'

  " Terraform
  Plug 'hashivim/vim-terraform'

  " Icons (must be the last one)
  Plug 'ryanoasis/vim-devicons'

  call plug#end()

" }}}

" OPTIONS {{{
  " UI {{{
    set colorcolumn=+0 " Color column = textwidth
    set cursorline
    set foldcolumn=2
    set hlsearch
    set laststatus=2
    set number relativenumber
    " Show matching brackets when inserting
    set showmatch
    set showcmd
    set showtabline=2
    set textwidth=80
    set nowrap
    set mouse+=a
    if &term =~ '^tmux'
        " tmux knows the extended mouse mode
        set ttymouse=xterm2
    endif
    set term=screen-256color
    set encoding=UTF-8
  " }}}
  " Indentation {{{
    set autoindent
    set expandtab
    set shiftround
    set shiftwidth=2
    set tabstop=2
    set softtabstop=2
  " }}}
  " Etc {{{
    set backspace=2
    set backupcopy=yes
    set confirm
    " set clipboard=unnamed
    set clipboard=unnamedplus " for Linux
    set diffopt+=vertical     " for linux
    set formatoptions=cqj
    " Keep at least 5 lines above or below the cursor
    set scrolloff=5
    " set ignorecase
    set modeline
    set splitright
    " Wildmenu
    set wildmenu
    set wildmode=list:full

    " for coc.nvim
    set hidden
    set nobackup
    set nowritebackup
    set cmdheight=2
    set shortmess+=c
    set signcolumn=yes
    set updatetime=300

  " }}}
  " Colors {{{
    set background=dark
    " set background=light
    set t_Co=256
    let g:gruvbox_italic=1
    colorscheme gruvbox

    if has("termguicolors")
      set termguicolors
    endif

    if has("nvim")
      let $NVIM_TUI_ENABLE_TRUE_COLOR=1
      set t_8f=u;%lu;%lum
      set t_8b=u;%lu;%lum
    else
      let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
      let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    endif

    set fillchars+=vert:│
  " }}}
" }}}

" MAPS {{{
  " General {{{
    " fzf
    nnoremap <c-p> :FZF<cr>

    " Search selected text
    vnoremap / "py/\V<c-r>p<cr>

    " Easier %
    nnoremap M %
    vnoremap M %

    " Insert mode
    inoremap <c-o> <esc>O

    " Save
    nnoremap <f5> :w<cr>
    inoremap <f5> <esc>:w<cr>

    " Easier command history navigation
    cnoremap <c-p> <up>
    cnoremap <c-n> <down>

    " Hide searched items
    nnoremap <silent> <c-h> :nohl<cr>

    " Paste over visual
    vnoremap p "_dP

    " majutsushi/tagbar
    nmap <F8> :TagbarToggle<CR>
  " }}}
  " Leader maps {{{
    let mapleader = ' '
    let maplocalleader = ','

    " C: Copy {{{
      " cf: copy filename to clipboard
      nnoremap <silent> <leader>cf :let @+=expand('%:tfoo')<cr>
      " cp: copy path to clipboard
      nnoremap <silent> <leader>cp :let @+= expand("%:p")<cr> 
      " cl: copy filename:linenumber to clipboard
      nnoremap <silent> <leader>cl :let @+=join([expand('%:tfoo'), line(".")], ":")<cr>
    " }}}
    " N: NERDTree {{{
      nnoremap <leader>nf :NERDTreeFind<cr>
    " }}}
    " Y: YouCompleteMe {{{
      nnoremap gd :YcmCompleter GoToDefinition<cr>
    " }}}
    " }}}
    " Q: Quickfix {{{
      nnoremap <leader>qc :cclose<cr>
    " }}}
    " V: Vim {{{
      nnoremap <leader>vv :tabe $MYVIMRC<cr>
      nnoremap <leader>vr :source $MYVIMRC<cr>
      nnoremap <leader>vs :tabe $VIMHOME/UltiSnips<cr>
    " }}}
    " W: Windows {{{
      nnoremap <silent> <leader>wo :only<cr>
      nnoremap <silent> <leader>wh <c-w>h
      nnoremap <silent> <leader>wj <c-w>j
      nnoremap <silent> <leader>wk <c-w>k
      nnoremap <silent> <leader>wl <c-w>l
      nnoremap <silent> <leader>ww <c-w>w
    " }}}
  " }}}
" }}}

" PLUGINS {{{
  autocmd FileType javascript hi link jsObjectKey GruvboxFg3 
  autocmd FileType javascript hi link jsFuncCall Constant

  " coc.nvim
  " @link: https://github.com/neoclide/coc.nvim#example-vim-configuration
  "
  " Use tab for trigger completion with characters ahead and navigate.
  inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ CheckBackspace() ? "\<Tab>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

  function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion.
  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  " show all diagnostics
  nnoremap <silent> <Leader>a  :<C-u>CocList diagnostics<cr>

  " Use `[g` and `]g` to navigate diagnostics
  " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call ShowDocumentation()<CR>

  function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
      call CocActionAsync('doHover')
    else
      call feedkeys('K', 'in')
    endif
  endfunction

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Symbol renaming.
  nmap <leader>rn <Plug>(coc-rename)

  " Formatting selected code.
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  " Applying codeAction to the selected region.
  " Example: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap keys for applying codeAction to the current buffer.
  nmap <leader>ac  <Plug>(coc-codeaction)
  " Apply AutoFix to problem on the current line.
  nmap <leader>qf  <Plug>(coc-fix-current)

  " Run the Code Lens action on the current line.
  nmap <leader>cl  <Plug>(coc-codelens-action)

  " Remap <C-f> and <C-b> for scroll float windows/popups.
  if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  endif

  " Add `:Format` command to format current buffer.
  command! -nargs=0 Format :call CocActionAsync('format')

  " Add `:OR` command for organize imports of the current buffer.
  command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

  " @reference https://www.reddit.com/r/neovim/comments/weydql/comment/ikkl1eq/?utm_source=share&utm_medium=web2x&context=3
  " inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-y>"

  " }}}

  " airline {{{
    " devicons
    let g:airline_powerline_fonts = 1
  " }}}

    " IDE

    " ale error & warning icons
    let g:ale_sign_error = '⤫'
    let g:ale_sign_warning = '⚠'
    " enable integration with airline
    let g:airline#extensions#ale#enabled = 1

    autocmd FileType typescript,go,elm,haskell,rust nnoremap <buffer> <leader>? :call ale#cursor#ShowCursorDetail()<cr>

    " TODO: 'haskell': ['ghc', 'hlint', 'hdevtools', 'ghc-mod'],
    let g:ale_linters ={
        \   'haskell': ['stack-ghc', 'hlint'],
        \   'go': ['gometalinter'],
        \   'typescript': ['tslint', 'eslint'],
        \   'javascript': ['eslint'],
        \}

    let b:ale_fixers = {
        \   'elm': ['elm-format'],
        \   'javascript': ['prettier'],
        \   'typescript': ['prettier'],
        \   'go': ['gofmt', 'goimports'],
        \}
    let g:ale_fix_on_save = 1

    " Typescript
    let g:typescript_indent_disable = 1 " @link https://github.com/leafgarland/typescript-vim#indenting

    " Go

    " goimports on save
    let g:go_fmt_command = "goimports"

    " add tags (i.e. json) :GoAddTags
    let g:go_addtags_transform = "camelcase"

    " elm
    let g:elm_format_autosave = 1
  " }}}

  " }}}

  " NERDTree {{{
    let NERDTreeQuitOnOpen=1
    let NERDTreeShowHidden=1
    let g:NERDTreeWinSize = 50
    nnoremap <f2> :NERDTreeToggle<cr>
    inoremap <f2> <esc>:NERDTreeToggle<cr>

    " NERDTress File highlighting
    function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
    endfunction

    call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')

    call NERDTreeHighlightFile('md', 'Red', 'none', '#ffa500', '#151515')

    call NERDTreeHighlightFile('js', 'yellow', 'none', 'yellow', '#151515')
    call NERDTreeHighlightFile('jsx', 'blue', 'none', '#3366FF', '#151515')
    call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')

    call NERDTreeHighlightFile('html', 'Red', 'none', '#ffa500', '#151515')
    call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')

    call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
    call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')

    call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

  " }}}

  " CamelCaseMotion {{{
  call camelcasemotion#CreateMotionMappings('<leader>')
  " }}}

  " Tern {{{
    let tern_map_keys = 1
  " }}}

  " vim-javascript {{{
    let g:jsx_ext_required = 0
  " vim-javascript }}}
  
  " PureScript
  let g:psc_ide_syntastic_mode = 1
  nnoremap <buffer> <silent> <leader>g :Pgoto<CR>

  " Haskell
  " nnoremap <Leader>ht :GhcModType<cr>
  " nnoremap <Leader>htc :GhcModTypeClear<cr>
  " Search for next top level def
  nnoremap <buffer> ]] /^\(\w\+\)\s\+::\\|\(^\s\+\)::<cr>
  nnoremap <buffer> [[ ?^\(\w\+\)\s\+::\\|\(^\s\+\)::<cr>
  " TODO: install ghcide !!!
  " au User lsp_setup call lsp#register_server({
  "   \ 'name': 'ghcide',
  "   \ 'cmd': {server_info->['/home/gillchristian/.local/bin/ghcide', '--lsp']},
  "   \ 'whitelist': ['haskell'],
  "   \ })
  " nnoremap <leader>t :LspHover<cr>

  let g:haskellmode_completion_ghc = 1
  " autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
  let g:ale_haskell_hlint_executable = 'stack'
  let g:ale_haskell_hfmt_executable = 'stack'

  let g:haskell_classic_highlighting = 1    " More normal highlighting
  let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
  let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`

  " others
    let g:netrw_browsex_viewer= "xdg-open"
    let g:move_key_modifier = 'C'
" }}}
