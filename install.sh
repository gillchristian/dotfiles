#!/bin/bash

set -euxo pipefail

XDG_CONFIG_HOME="$HOME/.config"
DOTFILES_DIR="$HOME/dev/dotfiles"
DEV_DIR="$HOME/dev"

source "$DOTFILES_DIR/helpers.sh"

function setup_dotfiles {
  if [ ! -d "$DEV_DIR" ] ; then
    mkdir "$DEV_DIR"
  fi
}

function install_brew {
  if ! exists brew; then
    # https://brew.sh/
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
}

# after brew

function setup_git {
  if [ ! -f ~/.gitconfig ] ; then
    link "$DOTFILES_DIR/git/gitconfig" ~/.gitconfig
  fi
  if [ ! -f ~/.gitignore_global ] ; then
    link "$DOTFILES_DIR/git/gitignore_global" ~/.gitignore_global
  fi
}

function install_alacritty {
  # check if cask is installed https://stackoverflow.com/a/33107009/4530566
  if ! cask-exists alacritty; then
    # GPU-accelerated terminal emulator
    # @link: https://github.com/jwilm/alacritty
    brew cask install alacritty
  fi

  if [ ! -f "$XDG_CONFIG_HOME/alacritty.yml" ] ; then
    link "$DOTFILES_DIR/alacritty/alacritty.yml" "$XDG_CONFIG_HOME/alacritty.yml"
  fi
}

function install_fonts {
  brew cask install font-fira-code font-go-mono-nerd-font font-hack-nerd-font
}

function install_utils {
  brew install cask
  # command line (and vim) fuzzy finder
  # @link: https://github.com/junegunn/fzf
  brew install fzf
  # record and share terminal sessions
  # @link: https://asciinema.org/
  brew install asciinema
  # executes a program periodically, showing output fullscreen
  brew install watch
  # command-line JSON processor
  # @link: https://stedolan.github.io/jq/
  brew install jq
  # shell linter
  # @link: https://www.shellcheck.net/
  brew install shellcheck
  # command-line interface to clipboard
  # @link: https://github.com/astrand/xclip
  brew install xclip
  # list directories with tree format
  # @link: https://formulae.brew.sh/formula/tree
  brew install tree

  brew install git-delta
}

function install_zsh {
  # dependencies
  brew install \
    openssh cmake ctags autoconf automake bison coreutils gettext

  # antibody - the package manager we use for zsh
  # @link https://getantibody.github.io/
  brew install getantibody/tap/antibody

  # TODO: zshrc should be generated by the install script
  link "$DOTFILES_DIR/zsh" ~/.zsh
  link "$DOTFILES_DIR/zsh/zshrc" ~/.zshrc
}

function install_node {
  case $1 in
    nvm)
      # not supported but nvm team but /shrug
      brew install nvm

      # installs latest node
      nvm install node
      nvm use node
      ;;
    *)
      # default to fnm since it's a better version ;)
      # @link: https://github.com/Schniz/fnm
      brew install Schniz/tap/fnm

      # install latest
      export PATH=$HOME/.fnm:$PATH
      eval "$(fnm env)"
      fnm install latest
      fnm use latest
      ;;
  esac

  brew install yarn

  yarn global add npm-ls-scripts serve diff-so-fancy
}

function install_vim {
  brew install vim --with-override-system-vi --override-system-vim

  if [ ! -d ~/.vim ] ; then
    link "$DOTFILES_DIR/vim" ~/.vim
  fi
  if [ ! -f ~/.vimrc ] ; then
    link "$DOTFILES_DIR/vim/vimrc" ~/.vimrc
  fi

  # TODO: check npm & yarn when YCM is added
  echo "Installing vim plugins"
  vim +PlugInstall +qall
}

function install_tmux {
  if ! exists tmux; then
    brew install tmux
  fi

  link "$DOTFILES_DIR/tmux/tmux.conf" "$HOME/.tmux.conf"
}

function install_docker {
  if ! exists docker; then
    brew install docker
  fi
  if ! cask-exists docker; then
    brew cask install docker
  fi
}

function install_rust {
  if ! exists cargo; then
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  fi

  # amber Search/Replace
  # @link: https://github.com/dalance/amber
  #
  # ripgrep -> grep replacement
  # @link: https://github.com/BurntSushi/ripgrep
  #
  # fd -> find replacement
  # @link: https://github.com/sharkdp/fd
  #
  # bat -> a cat clone with wings
  # @link: https://github.com/sharkdp/bat
  #
  # glint -> better git commits
  # https://github.com/brigand/glint
  #
  # exa -> a modern version of 'ls'
  # @link: https://github.com/ogham/exa
  # TODO: check before install
  cargo install ripgrep fd-find exa bat amber glint
}

# TODO: support installing other promps
function install_purs {
  if ! exists cargo; then
    # TODO: write to stderr
    echo "cargo (Rust) is required to install Purs"
    return 1
  fi
  # Purs - terminal prompt
  if ! exists purs; then
    local DIR="$HOME/dev/purs"
    # TODO: check clone
    git clone git@github.com:xcambar/purs.git "$DIR"
    cd "$DIR" || exit 1

    cargo install --path .
  fi
}

function install_go {
  # TODO: how to install globally with go?
  if ! exists go; then
    brew install go
  fi
}

function install_erlang {
  # TODO: is the repl called erlang? Or erl?
  if ! exists go; then
    brew install erlang
  fi
}

function install_haskell {
  # yeah both cabal & stack :)
  if ! exists cabal; then
    brew install cabal-install
  fi
  if ! exists stack; then
    curl -sSL https://get.haskellstack.org/ | sh
  fi

  link "$DOTFILES_DIR/haskell/ghci" ~/.ghci
  echo "Updating permissions of ~/.ghci (sudo is needed)"
  sudo chmod go-w ~/.ghci

  if [[ "$WITH_ORMOLU" = "false" ]]; then
    echo "Skipping ormolu install"
  elif ! exists ormolu; then
    local DIR="$DEV_DIR/ormolu"
    git clone git@github.com:tweag/ormolu.git "$DIR"
    cd "$DIR" || exit 1
    stack build --ghc-options -O2
    stack install .
  fi
}

function install_mine {
  if ! exists td; then
    local DIR="$DEV_DIR/todos"
    git clone git@github.com:gillchristian/todos.git "$DIR"
    cd "$DIR" || exit 1
    stack build --ghc-options -O2
    stack install .
  fi

  if [ ! -d "$HOME/.todos" ] ; then
    git clone git@github.com:gillchristian/todos-data.git "$HOME/.todos"
  fi
}

function main {
  setup_dotfiles

  default_modules="brew git zsh utils fonts alacritty vim tmux docker rust purs node haskell go erlang"
  modules=${MODULE:=$default_modules}

  # TODO: install on the right order ()
  #       brew git zsh are dependencies but don't need to be installed
  #       if this is not the initial run on the system (i.e. if they are there)
  for module in $modules
  do
    case $module in
      # main dependencies
      brew) install_brew ;;
      git) install_git ;;
      zsh) install_zsh ;;
      purs) install_purs ;;
      # misc
      utils) install_utils ;;
      fonts) install_fonts ;;
      # apps
      alacritty) install_alacritty ;;
      vim) install_vim ;;
      tmux) install_tmux ;;
      # language envs & platforms
      docker) install_docker ;;
      rust) install_rust ;;
      node) install_node "$NODE_MANAGER" ;;
      haskell) install_haskell ;;
      go) install_go ;;
      erlang) install_erlang ;;
    esac
  done

  # TODO: only run for me --- how ????
  if false; then
    install_mine
  fi
}
